" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<CR>

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Ag searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Highlight search
set hlsearch

" Set color scheme
syntax enable
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

" Insert mode key mapping
imap jk     <esc>
imap kj     <esc>
imap <C-s>  <esc>:w<cr>
imap <C-e>  <C-y>,

" Global search
nnoremap \ :Ag<SPACE>-Q<SPACE>
nnoremap \\ *N:Ag<SPACE><cword><cr>

" Command aliases
command Html e %<.html
command Sass e %<.sass
command Ts e %<.ts

" UltiSnips setting
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']

" Auto set paste mode
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

set tags=./tags,tags;$HOME
