# GENERIC

# console.log
snippet "(console|cl)" "console.log ..." r
console.log(${1:"${2:value}"});
endsnippet

# function
snippet "(function|func)" "function ..." r
${1:functionName}(${2:args}): ${3:void} {
	${4://code...}
}
endsnippet

# class
snippet "(class|cls)" "class ..." r
export class ${1:ClassName} {
	constructor(${2:args}) {
		${3://code...}
	}}
}
endsnippet

# interface
snippet "(int|inter|interface)" "interface ..." r
interface ${1:InterfaceName} {
	${2://code...}
}
endsnippet

# ANGULAR

# import
snippet import "import ..." b
import { ${1:module-or-component} } from '${2:path-to-component}';
endsnippet

# subscribe
snippet "(subscribe|sub)" "subscribe ..." r
this.${1:serviceName}.${2:serviceFunction}(${3:args})
	.subscribe(
		${4:response} => {
			${5://code...}
		},
		error => {
			console.error(error);
		}
	);
endsnippet

# input
snippet input "input ..." b
@Input() ${1:property}: ${2:type};
endsnippet

# output
snippet output "output ..." b
@Output() ${1:event}: EventEmitter<${2:type}> = new EventEmitter();
endsnippet
